package ru.otus.module1

object controlStructures {


  /**
   * Управляющие конструкции
   *   if / else
   *   while / do while
   *   for
   */


  /**
   *
   * Конструкция if / else имеет туже семантику, что и в других ЯП. В зависимости от условия, выполняется либо одна либо
   * другая ветка.
   * При этом тип и значение if / else выражения определяется также, как и для блока кода.
   * Т.е. последним выражением в исполняемой ветке.
   *
   */


  val cond: Boolean = true

  //1. Напишите выражение, которое в зависимости от значения выражения cond
  // будет возвращать "yes" или "no",
  // присвойте его в значение х1

  val x1 = if(cond) "yes" else "no"








  //2. Напишите выражение, но которое в зависимости от значения выражения cond
  // будет печатать "yes" или "no" в консоль,
  // присвойте его в значение х2

  val x2: Any = if(cond) "yes" else println("no")




  //3. Напишите выражение, которое если значение переменной cond будет true напечатает в консоль "yes", а если
  // false то вернет строку "no",
  // присвойте его в значение х3




  /**
   * циклы while / do while
   * Повторяют выполнение своего тела, пока условие истинно. Подразумевают наличие side effect.
   * Отличаются моментом, когда происходит проверка условия ДО или ПОСЛЕ выполнения тела цикла
   */

   var cond2 = true

   val x4: Unit = do{
     println("hi")
   }while(cond2)




  /**
   * цикл for позволяет итерироваться по коллекциям,
   * имеет своеобразный синтаксис с обратной стрелочкой
   */

   val arr = Array(1, 2, 3)

   for(el <- arr){
     println(el)
   }



}
